{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Getting Started","text":"<p>    \u26a0\ufe0f Stop saying \"you forgot to \u2026\" in code review in Kotlin </p>"},{"location":"#danger-kotlin","title":"Danger Kotlin","text":"<p>This project is a middleware layer for Danger that evaluates your Kotlin script based Dangerfile against your pull requests.</p>"},{"location":"#installation","title":"Installation","text":"Mac <pre><code>homebrew install r0adkll/tap/danger-kotlin\n</code></pre> Linux <pre><code>bash &lt;(curl -s https://raw.githubusercontent.com/r0adkll/danger-kotlin/main/scripts/install.sh)\nsource ~/.bash_profile\n</code></pre> Directly from source <pre><code>git clone https://github.com/r0adkll/danger-kotlin.git\nsudo make install\n</code></pre>"},{"location":"#write-your-first-dangerfile","title":"Write your first Dangerfile","text":"<p>Check out the Dangerfile &gt; Basic page to get started!</p>"},{"location":"#running-your-dangerfiles","title":"Running your Dangerfile\u2019s","text":"<p>Check out the Usage page to get started!</p>"},{"location":"#ide-plugin","title":"IDE Plugin","text":"<p>Check out the IntelliJ Plugin page to get started!</p>"},{"location":"#extending-danger-kotlin","title":"Extending Danger Kotlin","text":"<p>Check out Plugins page for more information on extending Danger with custom plugins.</p>"},{"location":"advanced/","title":"Advanced Dangerfile","text":"<p>You can perform more intensive checks such as network requests, disk reads, etc by using coroutines via <code>runBlocking { \u2026 }</code></p> <p>Example</p> <pre><code>danger(args) {\n  //...\n\n  runBlocking {\n    val result = client.get(\"https://example.com/api/do-stuff?q=foo\")\n    if (result.isSuccess) {\n      message(\"I did the thing!\")\n    }\n  }\n}\n</code></pre> <p>Or you can even run concurrent tasks using <code>async {}</code></p> <pre><code>danger(args) {\n  // ...\n\n  runBlocking {\n    async { /* Do stuff */ }\n    async { /* Do stuff */ }\n    async { /* Do stuff */ }\n  }\n\n  message(\"All async tasks have finished!\")\n}\n</code></pre>"},{"location":"basic/","title":"Dangerfile.df.kts","text":"<p>To get started create a new <code>Dangerfile.df.kts</code> script in the root of your project. In this script file you can use the PR / Git metadata to automate messaging, checks, and other aspects of your engineering culture.</p> <pre><code>import systems.danger.kotlin.*\n\ndanger(args) {\n\n    val allSourceFiles = git.modifiedFiles + git.createdFiles\n    val changelogChanged = allSourceFiles.contains(\"CHANGELOG.md\")\n    val sourceChanges = allSourceFiles.firstOrNull { it.contains(\"src\") }\n\n    onGitHub {\n        val isTrivial = pullRequest.title.contains(\"#trivial\")\n\n        // Changelog\n        if (!isTrivial &amp;&amp; !changelogChanged &amp;&amp; sourceChanges != null) {\n            warn(WordUtils.capitalize(\"any changes to library code should be reflected in the Changelog.\\n\\nPlease consider adding a note there and adhere to the [Changelog Guidelines](https://github.com/Moya/contributors/blob/master/Changelog%20Guidelines.md).\"))\n        }\n\n        // Big PR Check\n        if ((pullRequest.additions ?: 0) - (pullRequest.deletions ?: 0) &gt; 300) {\n            warn(\"Big PR, try to keep changes smaller if you can\")\n        }\n\n        // Work in progress check\n        if (pullRequest.title.contains(\"WIP\", false)) {\n            warn(\"PR is classed as Work in Progress\")\n        }\n    }\n}\n</code></pre> <p>Check out the docs on the Danger DSL here: TBD</p>"},{"location":"basic/#github","title":"GitHub","text":"<p>You can access the pull request information from GitHub by using</p> <pre><code>danger(args) {\n  github.pullRequest.//...\n  github.reviews.//...\n}\n</code></pre> <p>or use the <code>onGithub { \u2026 }</code> to conditionally run checks ONLY on GitHub if you support multiple CI providers</p> <p>Additionally, Danger Kotlin also provides a hydrated GitHub API client via Spotify\u2019s github-java-client library. It uses the same token/url environment variables as the underlying danger-js implementation:</p> <pre><code>DANGER_GITHUB_API_TOKEN=...\nDANGER_GITHUB_API_BASE_URL=...\n# Additionally, can set the graphql url for the Github API Client via:\nDANGER_GITHUB_GRAPHQL_BASE_URL=...\n</code></pre> <p>You can access this by calling the extension method</p> <pre><code>danger(args) {\n  github.api.//...\n}\n</code></pre>"},{"location":"intellij-plugin/","title":"IntelliJ Plugin","text":"<p>Note</p> <p>From version <code>2.1.0</code> and onwards only K2 mode is supported. Due to breaking changes in the kotlin scripting APIs between IntelliJ versions 251 and 252 K1 mode support was dropped. Please use version <code>2.0.8</code> and below for K1 support.</p> <p>This project provides an IDE plugin to automatically add the Danger kotlin script definition to your IDE so syntax highlighting and auto-complete work out of the box. The plugin will also detect the <code>danger(args) { \u2026 }</code> in your scripts and give you a gutter run action, \u25b6\ufe0e, that lets your test your Dangerfiles directly in the IDE.</p> <p>Bug</p> <p>All <code>@file:Import</code> and <code>@file:ImportDirectory</code> annotations are disabled under the hood when editing Dangerfile scripts in your IDE. This is due to a bug in IntelliJ breaking when trying to load other scripts into scripts.</p> <p>See https://youtrack.jetbrains.com/issue/KTIJ-16352</p>"},{"location":"intellij-plugin/#git-integration","title":"Git Integration","text":"<p>As discussed in the usage page you can run <code>danger-kotlin local</code> against your local changes in git against a base branch (i.e. main, master, develop, etc). The IntelliJ plugin will automatically detect when you are on a branch with changes against a base branch and give you a run action to test your Dangerfile</p> <p></p>"},{"location":"intellij-plugin/#github-integration","title":"GitHub Integration","text":"<p>The plugin also brings support for the built-in GitHub Plugin that allows it to automatically find the pull request and authentication information based on your tracked remote branches in Git and provide a run action using <code>danger-kotlin pr</code></p> <p>This works by matching authenticated accounts server hosts with your git remotes and querying open pull requests that have the matching HEAD ref as your current tracked remote branch. After this, it will additionally hydrate the run environment with the GitHub host/api urls and token, i.e.</p> <pre><code>DANGER_GITHUB_API_TOKEN\nDANGER_GITHUB_API_BASE_URL\nDANGER_GITHUB_GRAPHQL_BASE_URL\n</code></pre> <p>Here is an example of how this looks:</p> <p></p>"},{"location":"intellij-plugin/#installation","title":"Installation","text":"<p>You can install the plugin directly from the Jetbrains marketplace online or in your IDE.</p> <p>Check it out in <code>Settings &gt; Plugins &gt; Marketplace</code></p> <p>or</p>"},{"location":"rules/","title":"Rules","text":"<p>Rules are a new concept in this fork of Danger Kotlin that allow you to modularize your rules and checks in an ordered way without having to crowd all your logic into a single file.</p>"},{"location":"rules/#creating-a-rule","title":"Creating a rule","text":"<p>Use the top-level <code>rule(\u2026)</code> function to register a new rule with an id, like so:</p> <pre><code>import systems.danger.kotlin.rule.*\n\nrule(\"title-check\") {\n  if (!github.pullRequest.title.matches(TITLE_REGEX)) {\n    fail(\"The title of this pull request must match the format \\\"JIRA-123: Description of Changes\\\"\")\n  }\n\n  RuleResult.Continue\n}\n</code></pre>"},{"location":"rules/#depending-on-other-rules","title":"Depending on other rules","text":"<p>You can also have rules depend on the execution of other rules. Each rule returns a <code>RuleResult</code> that dictates whether the rule chain continues to execute, or exits entirely.</p> <pre><code>import systems.danger.kotlin.rule.*\n\nrule(\"bot-check\") {\n  if (github.pullRequest.user.type == GitHubUserType.BOT) {\n    RuleResult.Exit\n  } else {\n    RuleResult.Continue\n  }\n}\n\n//...\n\nrule(id = \"title-check\", \"bot-check\") {\n  if (!github.pullRequest.title.matches(TITLE_REGEX)) {\n    fail(\"The title of this pull request must match the format \\\"JIRA-123: Description of Changes\\\"\")\n  }\n\n  RuleResult.Continue\n}\n</code></pre> <p>If the <code>bot-check</code> rule returns <code>RuleResult.Exit</code> then the <code>title-check</code> rule will not execute.</p>"},{"location":"rules/#applying-rules","title":"Applying rules","text":"<p>To apply your rule chain in your main Dangerfile just import your other rule script files add <code>applyRules()</code> inside the DangerDSL, like so:</p> <pre><code>@file:Import(\"rules/bot-check.df.kts\")\n@file:Import(\"rules/title-check.df.kts\")\n\nimport systems.danger.kotlin.*\nimport systems.danger.kotlin.rule.*\n\ndanger(args) {\n  applyRules()\n}\n</code></pre> <p>or use the <code>@file:ImportDirectory</code> annotation to import an entire directory of Dangerfile scripts into your main file</p> <pre><code>@file:ImportDirectory(\"rules\")\n\nimport systems.danger.kotlin.*\nimport systems.danger.kotlin.rule.*\n\ndanger(args) {\n  applyRules()\n}\n</code></pre>"},{"location":"sdk/","title":"Plugin Development","text":"<p>Danger Kotlin provides an SDK for developing integrations using a lightweight Danger context without having to depend on the full Danger library.</p>"},{"location":"sdk/#setup","title":"Setup","text":"<p>Add the sdk as a dependency to your project:</p> <pre><code>dependencies {\n  implementation(\"com.r0adkll.danger:danger-kotlin-sdk:&lt;latest_version&gt;\")\n}\n</code></pre> <p>Next, create your main plugin class that you will later register and use.</p> <pre><code>package com.example.plugin\n\nimport systems.danger.kotlin.sdk.DangerPlugin\n\nobject ExamplePlugin : DangerPlugin() {\n\n  override val id: String = \"com.example.plugin.ExamplePlugin\"\n\n  fun doStuff() {\n    context.message(\"\ud83d\udc4b Hello from my Danger plugin!\")\n  }\n}\n</code></pre>"},{"location":"sdk/#installation","title":"Installation","text":"<p>To use your custom plugin you\u2019ll either need to:</p>"},{"location":"sdk/#publish-your-sdk-to-a-maven-repository","title":"Publish your SDK to a maven repository","text":"<p>Then use the following annotations to import</p> <pre><code>@file:Repository(\"http://url.to.maven.repo/repository\")\n@file:DependsOn(\"com.example.plugin:example-plugin:version\")\n\nimport com.example.plugin.ExamplePlugin\n\n//\u2026\n</code></pre>"},{"location":"sdk/#manually-copy-output-jar","title":"Manually copy output JAR","text":"<p>Copy our plugins compiled JAR file to one of these dirs:</p> <ul> <li><code>/usr/local/lib/danger/libs</code></li> <li><code>/opt/local/lib/danger/libs</code></li> <li><code>/opt/homebrew/lib/danger/libs</code></li> <li><code>/usr/lib/danger/libs</code></li> </ul> <p>Then use the following annotation to import</p> <pre><code>@file:DependsOn(\"example-plugin-0.0.1.jar\")\n\nimport com.example.plugin.ExamplePlugin\n\n//\u2026\n</code></pre>"},{"location":"sdk/#usage","title":"Usage","text":"<p>Once you have your plugin installed, register and use it like so</p> <pre><code>// @file:\u2026\n\nimport com.example.plugin.ExamplePlugin\nimport systems.danger.kotlin.*\n\nDanger register ExamplePlugin\n\ndanger(args) {\n  // Do the thing!\n  ExamplePlugin.doStuff()\n}\n</code></pre> <p>or if you want to register multiple plugins at a time</p> <pre><code>// @file:\u2026\n\nimport com.example.plugin.ExamplePlugin\nimport systems.danger.kotlin.*\n\nplugins {\n  register(ExamplePlugin)\n  register(SomeOtherPlugin)\n}\n\ndanger(args) {\n  // Do the thing!\n  ExamplePlugin.doStuff()\n  SomeOtherPlugin.doOtherStuff()\n}\n</code></pre>"},{"location":"sdk/#testing","title":"Testing","text":"<p>The SDK provides test fixtures to make it easier to test your plugins. Just import them like so:</p> <pre><code>dependencies {\n  testImplementation(testFixtures(\"com.r0adkll.danger:danger-kotlin-sdk:&lt;latest_version&gt;\"))\n}\n</code></pre> <p>and then setup your test</p> <pre><code>class FailWithRetryMessageTest {\n  private val dangerContext = TestDangerContext()\n\n  @BeforeEach\n  fun setUp() {\n    ExamplePlugin.registeredContext = dangerContext\n  }\n\n  @Test\n  fun `failWithRetryMessage only posts message once`() {\n    // given\n    val fail1 = \"Test failure 1\"\n    val fail2 = \"Test failure 2\"\n\n    // when\n    ExamplePlugin.failWithRetryMessage(fail1)\n    ExamplePlugin.failWithRetryMessage(fail2)\n\n    // then\n    expectThat(dangerContext.messages)\n      .hasSize(1)\n      .containsExactly(Violation(ExamplePlugin.retryMessage))\n\n    expectThat(dangerContext.fails)\n      .hasSize(2)\n      .containsExactly(Violation(fail1), Violation(fail2))\n  }\n}\n</code></pre>"},{"location":"usage/","title":"Usage","text":"<p>Danger has a few run commands, but we will focus on the main ones you\u2019ll use here.</p>"},{"location":"usage/#local","title":"Local","text":"<p>The <code>local</code> command runs Danger without the PR metadata which is helpful for local testing checks and rules against code/commit changes. This can be helpful in git hooks or just for local testing.</p>"},{"location":"usage/#command","title":"Command","text":"<pre><code>danger-kotlin local\n</code></pre>"},{"location":"usage/#options","title":"Options","text":"<pre><code>Options:\n  -s, --staging                             Just use staged changes.\n  -b, --base [branch_name]                  Use a different base branch (default: \"master\")\n  -j, --outputJSON                          Outputs the resulting JSON to STDOUT\n  -v, --verbose                             Verbose output of files\n  -d, --dangerfile [filePath | remote url]  Specify a custom dangerfile path, remote urls only work with github\n  -i, --id [danger_id]                      Specify a unique Danger ID for the Danger run\n</code></pre>"},{"location":"usage/#pull-requests","title":"Pull Requests","text":"<p>The <code>pr</code> command emulates running Danger against an existing GitHub PR. This will allow you to test your rules and checks against the PR metadata.</p>"},{"location":"usage/#command_1","title":"Command","text":"<pre><code>danger-kotlin pr https://github.com/user/repo/pulls/10\n</code></pre>"},{"location":"usage/#options_1","title":"Options","text":"<pre><code>Options:\n  -J, --json                                Output the raw JSON that would be passed into `danger process` for this PR.\n  -j, --js                                  A more human-readable version of the JSON.\n  -v, --verbose                             Verbose output of files\n  -d, --dangerfile [filePath | remote url]  Specify a custom dangerfile path, remote urls only work with github\n  -i, --id [danger_id]                      Specify a unique Danger ID for the Danger run\n  -c, --external-ci-provider [modulePath]   Specify custom CI provider\n</code></pre>"}]}